:: This batch file handles managing an Erlang node as a Windows service.
::
:: Commands provided:
::
:: * install - install the release as a Windows service
:: * start - start the service and Erlang node
:: * stop - stop the service and Erlang node
:: * restart - run the stop command and start command
:: * uninstall - uninstall the service and kill a running node
:: * ping - check if the node is running
:: * console - start the Erlang release in a `werl` Windows shell
:: * attach - connect to a running node and open an interactive console
:: * list - display a listing of installed Erlang services
:: * usage - display available commands

:: Set variables that describe the release
@set rel_name=<%= release_name %>
@set rel_vsn=<%= release_version %>
@set erts_vsn=<%= erts_vsn %>
@set erl_opts=<%= erl_opts %>

:: Discover the release root directory from the directory
:: of this script
@set script_dir=%~dp0
@for %%A in ("%script_dir%\..\..") do @(
  set release_root_dir=%%~fA
)
@set rel_dir=%release_root_dir%\releases\%rel_vsn%
@echo rel_dir is %rel_dir%

@if "%RELEASE_MUTABLE_DIR%"=="" (
  set mutable_dir=%release_root_dir%\var
) else (
  set mutable_dir=%RELEASE_MUTABLE_DIR
)
::@echo mutable_dir is %mutable_dir%

@if "%RELEASE_CONFIG_DIR%"=="" (
  set config_dir=%release_root_dir%
) else (
  set config_dir=%RELEASE_CONFIG_DIR%
)
::@echo config_dir is %config_dir%

@set log_dir=%mutable_dir%\log
::@echo log_dir is %log_dir%

:: Create directories which don't exist
@if not exist %mutable_dir% mkdir %mutable_dir%
@if not exist %config_dir% mkdir %config_dir%
@if not exist %log_dir% mkdir %log_dir%

@call :find_erts_dir
@call :find_sys_config
@call :find_vm_args
@call :set_boot_script_var

@set service_name=%rel_name%_%rel_vsn%
@set bindir=%erts_dir%\bin
@set progname=erl.exe
@set clean_boot_script=%release_root_dir%\bin\start_clean
@set erlsrv="%bindir%\erlsrv.exe"
@set epmd="%bindir%\epmd.exe"
@set escript="%bindir%\escript.exe"
@set werl="%bindir%\werl.exe"
@set nodetool="%release_root_dir%\bin\nodetool"

:: Extract node type and name from vm.args
@for /f "usebackq tokens=1-2" %%I in (`findstr /b "\-name \-sname" "%vm_args%"`) do @(
  set node_type=%%I
  set node_name=%%J
)

:: Extract cookie from vm.args
@for /f "usebackq tokens=1-2" %%I in (`findstr /b \-setcookie "%vm_args%"`) do @(
  set cookie=%%J
)

:: Write the erl.ini file to set up paths relative to this script
@call :write_ini

:: If a start.boot file is not present, copy one from the named .boot file
@if not exist "%rel_dir%\start.boot" (
  copy "%rel_dir%\%rel_name%.boot" "%rel_dir%\start.boot" >nul
)

@if %1=="install" @goto install
@if %1=="uninstall" @goto uninstall
@if %1=="start" @goto start
@if %1=="stop" @goto stop
@if %1=="restart" @call :stop && @goto start
@if %1=="upgrade" @goto relup
@if %1=="downgrade" @goto relup
@if %1=="console" @goto console
@if %1=="ping" @goto ping
@if %1=="list" @goto list
@if %1=="attach" @goto attach
@if %1=="" @goto usage
@echo Unknown command: %1

@goto :eof

:: Find the ERTS dir
:find_erts_dir
@if "%erts_vsn%"=="" (
  call :use_system_erts
) else (
  call :use_bundled_erts
)
@goto :eof

:: Load system ERTS info
:use_system_erts
@for /f "delims=" %%i in ('where erl') do set system_erl="%%i"
@if %system_erl%=="" (
  echo failed to locate the Erlang Runtime System!
  exit 1
)
@set system_root_dir_cmd=%system_erl% -noshell -eval "io:format(\"~s\", [filename:nativename(code:root_dir())])." -s init stop
@for /f "delims=" %%i in (`%%system_root_dir_cmd%%`) do set system_root=%%i
@set system_erts_vsn_cmd=%system_erl% -noshell -eval "Ver=erlang:system_info(version),io:format(\"~s\", [Ver])" -s init stop
@for /f "delims=" %%i in (`%%system_erts_vsn_cmd%%`) do set system_erts_vsn=%%i
@set erl=%system_erl%
@set erts_vsn=%system_erts_vsn%
@set rootdir=%system_root%
@set erts_dir=%rootdir%\erts-%erts_vsn%
@goto :eof

:: Load bundled ERTS info
:use_bundled_erts
@set erts_dir=%release_root_dir%\erts-%erts_vsn%
@set erl=%erts_dir%\bin\erl
@set rootdir=%release_root_dir%
@goto :eof

:: Find the sys.config file
:find_sys_config
@set possible_sys=%release_config_dir%\sys.config
@if exist %possible_sys% (
  set sys_config_src=%possible_sys%
) else (
  set sys_config_src=%rel_dir%\sys.config
)
@set sys_config_target=%config_dir%\sys.config
:: Replace environment variables
@powershell -command "$content = get-content %sys_config_src%; [regex]::matches($content, '\${[\w\d_-]+}') | foreach { $content = $content.Replace($_.value, [System.Environment]::GetEnvironmentVariable($_.value)) }; out-file -filepath %sys_config_target% -inputobject $content -encoding ascii" 
@set sys_config=%sys_config_target%
@goto :eof

:find_vm_args
@set possible_vmargs=%release_config_dir%\vm.args
@if exist %possible_vmargs% (
  set vmargs_src=%possible_vmargs%
) else (
  set vmargs_src=%rel_dir%\vm.args
)
@set vmargs_target=%config_dir%\vm.args
:: Replace environment variables
@powershell -command "$content = get-content %vmargs_src%; [regex]::matches($content, '\${[\w\d_-]+}') | foreach { $content = $content.Replace($_.value, [System.Environment]::GetEnvironmentVariable($_.value)) }; out-file -filepath %vmargs_target% -inputobject $content -encoding ascii" 
@set vm_args=%vmargs_target%
@goto :eof

:: set boot_script variable
:set_boot_script_var
@if exist %rel_dir%\%rel_name%.boot (
  set boot_script=%rel_dir%\%rel_name%
) else (
  set boot_script=%rel_dir%\start
)
@goto :eof

:: Write the erl.ini file
:write_ini
@set erl_ini=%erts_dir%\bin\erl.ini
@set converted_bindir=%bindir:\=\\%
@set converted_rootdir=%rootdir:\=\\%
@echo [erlang] > "%erl_ini%"
@echo Bindir=%converted_bindir% >> "%erl_ini%"
@echo Progname=%progname% >> "%erl_ini%"
@echo Rootdir=%converted_rootdir% >> "%erl_ini%"
@goto :eof

:: Display usage information
:usage
@echo usage: %~n0 ^(install^|uninstall^|start^|stop^|restart^|upgrade^|downgrade^|console^|ping^|list^|attach^)
@goto :eof

:: Install the release as a Windows service
:: or install the specified version passed as argument
:install
@set args=%erl_opts% -setcookie %cookie% ++ ^
       -rootdir "%rootdir%" ^
       -reldir "%release_root_dir%\releases"
@echo reldir is %release_root_dir%\releases
@set start_erl=%erts_dir%\bin\start_erl.exe
@set description=Erlang node %node_name% in %rootdir%
@if "" == "%2" (
  :: Install the service
  %erlsrv% add %service_name% ^
            -c "%description%" ^
            %node_type% "%node_name%" ^
            -w "%rootdir%\var" ^
            -m "%start_erl%" ^
            -args "%args%" ^
            -debugtype new ^
            -stopaction "init:stop()."
) else (
  :: relup and reldown
  goto relup
)
@goto :eof

:: Uninstall the Windows service
:uninstall
@%erlsrv% remove %service_name%
@%epmd% -kill
@goto :eof

:: Start the Windows service
:start
@%erlsrv% start %service_name%
@goto :eof

:: Stop the Windows service
:stop
@%erlsrv% stop %service_name%
@goto :eof

:: Relup and reldown
:relup
@if "" == "%2" (
  echo Missing version argument
  echo Usage: %rel_name% %1 {version}
  set ERRORLEVEL=1
  exit /b %ERRORLEVEL%
)
@%escript% "%rootdir%/bin/install_upgrade.escript" "%rel_name%" "%node_name%" "%cookie%" "%2"
@goto :eof

:: Start a console
:console
@start "%rel_name% console" %werl% -boot "%boot_script%" ^
       -config "%sys_config%"  ^
       -args_file "%vm_args%" ^
       -user Elixir.IEx.CLI ^
       -extra --no-halt +iex
@goto :eof

:: Ping the running node
:ping
@%escript% %nodetool% ping %node_type% "%node_name%" -setcookie "%cookie%"
@goto :eof

:: List installed Erlang services
:list
@%erlsrv% list %service_name%
@goto :eof

:: Attach to a running node
:attach
@call :ping
@if %ERRORLEVEL% GEQ 1 exit %ERRORLEVEL%
@set id=remsh%RANDOM%-%node_name%
@start "%node_name% attach" %werl% -hidden -noshell -boot "%clean_boot_script%" ^
       -user Elixir.IEx.CLI %node_type% %id% -setcookie %cookie% ^
       -extra --no-halt +iex -%node_type% %id% --cookie %cookie% --remsh %node_name%
@goto :eof
